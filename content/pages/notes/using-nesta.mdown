Date: 15 April 2011
Categories: nesta, back-end

# First steps in Nesta (and Ruby)

In order to use custom content processing libarary (I wanted to try out new markdown lib from github, Redcarpet) I needed to extend [Nesta](http://nestacms.com)'s FileModel's `to_html` method, like so: 

~~~ruby
module Nesta 
  class FileModel 
    def to_html(scope = nil)
      case @format
        when :mdown
          Redcarpet.new(markup).to_html
        when :haml
          Haml::Engine.new(markup).to_html(scope || Object.new)
        when :textile
          RedCloth.new(markup).to_html
        end
    end
  end
end
~~~

That allows me to parse content files with Redcarpet. But what I also want to use `:redcarpet` as a filter in HAML? In order to do that, I needed to add new HAML filter:

~~~ruby
# Add Redcarpet HAML filter
module Haml::Filters::Redcarpet
  include Haml::Filters::Base

  def render(text)
    ::Redcarpet.new(text).to_html
  end
end
~~~

We can now use `:redcarpet` filter in HAML like so:

~~~haml
%p
  :redcarpet
    # Here goes markdown content
~~~

Another useful note: @page.metadata() method is exposed, i.e. you can specify any key in the top of your pages and you'll be able to access that data in your templates like so:

~~~haml
- if @page.metadata('foo')
  %h1 @page.metadata('foo')
~~~

It's important to note, that if you are going to retrieve values from `@page` in layout, guard yourself with `if`s, because there are pages like 404, that are using layout â€“ in that case you wont have `@page` defined, and calling `@page.method` will break.

Sources
-------
1. https://github.com/gma/nesta/blob/master/lib/nesta/models.rb
2. https://github.com/gma/nesta/issues#issue/21