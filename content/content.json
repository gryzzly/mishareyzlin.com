{
  "menu": [
    {
      "path": "/notes/",
      "title": "Notes",
      "uuid": "2162a607-bfa5-41b5-ab01-5ebae53bfd51",
      "sortIndex": 0
    },
    {
      "path": "Home",
      "title": "/",
      "uuid": "2af25248-14e9-470c-9896-5874eb920508",
      "sortIndex": 1
    },
    {
      "path": "/works",
      "title": "Works",
      "uuid": "e0fc47ef-ae76-40ed-8277-236355f21d03",
      "sortIndex": 2
    },
    {
      "path": "/cv",
      "title": "CV",
      "uuid": "d600ed36-897c-4d92-b3a3-dbd94aaca139",
      "sortIndex": 3
    }
  ],
  "pages": [
    {
      "path": "/",
      "title": "Hello",
      "content": "<p>My name is Misha Reyzlin &amp; I am a professional web developer. You may want to take a look at my <a href=\"/cv\">resume</a>. I use this website to keep my technical notes and to play with all kinds of things.</p><p>Me elsewhere: <a href=\"https://mastodon.social/@gryzzly\" rel=\"me\">mastodon</a>, <a href=\"https://github.com/gryzzly\">github</a>, <a href=\"https://stackoverflow.com/users/236135/misha-reyzlin\">stackoverflow</a>, <a href=\"http://www.linkedin.com/in/mishareyzlin\">linkedin</a></p>",
      "uuid": "c40fdfef-6315-4f05-9f5c-fe9984dcb634",
      "sortIndex": 0
    },
    {
      "path": "/notes/new-website-2022",
      "title": "Thanks Heroku for sunsetting the Free Tier",
      "uuid": "8b2f73f1-ea57-4a71-88d3-1d6a3ee9615b",
      "content": "<div>Finally, a new website. Heroku closed its free tier and with that I finally had a good enough reason to change hosting and stop using ruby.&nbsp;</div><div><br></div><div>Now this is a pre-rendered static site, but I still can enjoy a web editing experience, without having to manually edit text files, creating and pushing commits – I have realised an idea I had for a long time: content is stored in github in text files, admin allows to edit the content and all this with just 30 lines of nodejs server code to enable oath authorisation via proxy.&nbsp;</div><div><br></div><div>Once the Gitbub oauth flow is done, admin user is able to pull the contents and push changes with a UI based on a content model and forms matching the fields in the models.</div>",
      "date": "5 December 2022",
      "sortIndex": 1
    },
    {
      "sortIndex": 2,
      "path": "/notes/tonic-with-signals",
      "title": "Tonic web components with signals for state sync",
      "content": "<div>I‘ve been looking into <a href=\"https://tonicframework.dev\">Tonic</a>, a tiny web-components wrapper. Combining it with <a href=\"https://www.npmjs.com/package/@preact/signals-core\">preact core signals</a> to add state synchronisation is just a few lines:&nbsp;</div><pre>\nexport class Component extends Tonic { \n  _set(...args) {\n    effect(() =&gt; {\n      super._set(...args)\n    })\n  }\n}</pre><div><br>Adding an optimised ${value} wrapper that only rerenders the changed value is another extension on the Component class:<br><br></div><pre>...\nhtml(strings, ...values) {\n  const modifiedValues = values;\n  values.forEach((value, index) =&gt; {\n    if (value instanceof Signal) {\n      modifiedValues[index] = super.html`&lt;signal-wrapper signal=${value}&gt;&lt;/signal-wrapper&gt;`;\n    }\n  })\n  return super.html(strings, ...modifiedValues);\n}\n...</pre><div>And then define the &lt;signal-wrapper&gt; component that gets injected in places where signal is passed without .value reads:</div><div><br></div><pre>class SignalWrapper extends Tonic {\n  // don’t render initially, FIXME: do I need it?\n  preventRenderOnReconnect = true\n  \n  render() {\n    return this.html`${this.props.signal.value}`;\n  }\n\n  connected() {\n    this.unsubscribe = effect(() =&gt; {\n      this.props.signal.value;\n      this.reRender();\n    })\n  }\n\n  disconnected() {\n    this.unsubscribe();\n  }\n}\n<br></pre><div><br></div>",
      "uuid": "75f41f4e-c302-4b9b-82f8-f624f89a975b",
      "date": "21 January 2023"
    },
    {
      "sortIndex": 3,
      "path": "/notes/web-components-nested-rerender",
      "title": "Web Components Nested Rerender",
      "content": "<div>I have this idea, that if I build something \"not at work\", but, so to say, \"for kicks\", then I should not use dependencies and implement every little thing myself. Why? Simply because I believe that nothing a simple side project requires is too complicated to write yourself, and because achieving most of the same things that are possible with dependencies without them is a great way to learn the principles and ideas behind the said dependencies.&nbsp;<br><br>For example, I am constantly building and rebuilding a CMS for smaller projects. The idea behind it is to give the website owners (non-programming folks) convenience of Wordpress Admin, but without the owners having to pay for hosting. I am achieving this by building a light admin interface, that allows:</div><ol><li>user authentication and editing access by using a GitHub account</li><li>CRUD on a schema defined data</li></ol><div>For the first version I used Preact and its hooks for data management, but I am not happy with that, as I’d like to implement the component framework myself or not use one at all.&nbsp;<br><br>I want to learn web components and see whether they can allow the things I find ergonomic for writing UI. So, I attempt to rewrite my first version of the admin UI using web components.<br><br>Generally I want an easy way to:&nbsp;</div><ol><li>create a state store&nbsp;</li><li>subscribe to its changes</li><li>rerender the views based on these</li><li>provide the views with a way to trigger changes on the state</li></ol><div>I need to be able to express the following<br><br></div><pre>const state = new Store({ \n  isAuthorised: false,\n  menu: [{ path: '/', title: 'Home', path: '/products', title: 'Products' }],\n  pages: [],\n})\n\nclass AppView extends Component {\n  onAuthorise() {\n    state.isAuthorised = true;\n  }\n  template({isAuthorised}) {\n    // using HTML template could be better,\n    // because that way HTML parser is used and not a simple \n    // string concantenation\n    return `&lt;div&gt;${isAuthorised \n      ? `auth’d` \n      : `&lt;button&gt;&lt;/button&gt;`\n    }&lt;/div&gt;`\n  }\n  events: {\n    'onClick button': this.buttonOnClick\n  },\n}\nconst view = new View(state);\n\nstate.on('datachange', (event) =&gt; {\n  view.rerender(event.changed);\n});</pre><div><br><br></div>",
      "uuid": "2315734a-042c-4812-ade1-1529cff79bb8",
      "date": "26 July 2023"
    },
    {
      "sortIndex": 4,
      "path": "/notes/get-image-dimensions-node-deno",
      "content": "<div>I was building a pre-rendered website recently. The client (my dad) could upload images and I needed a way to use their width and height in the HTML. I am trying to not use npm and rather write all the code by hand (and yes, also copying and pasting bits from various <a href=\"https://github.com/nodeca/probe-image-size\">open source projects</a>) so that I have at least attentively read every line. The thinking I have is always – what’s the minimum amount of straightforward code that can achieve what I need, with API that makes sense for my work, and ideally using platform features so I learn more about the standard environment in which my code runs.&nbsp;<br><br>So here’s the `util/get-image-dimensions.js` that works for JPEG, PNG, GIF and WebP image formats:</div><pre>import fs from 'node:fs';\n\n// Permission is hereby granted, free of charge, to any person\n// obtaining a copy of this software and associated documentation\n// files (the \"Software\"), to deal in the Software without\n// restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the\n// Software is furnished to do so, subject to the following\n// conditions:\n\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n// OTHER DEALINGS IN THE SOFTWARE.\nexport function getImageDimensions(imagePath) {\n  const data = fs.readFileSync(imagePath);\n  const header = data.toString('hex', 0, 12);\n  const type = getImageType(header);\n\n  let width, height;\n  switch (type) {\n    case 'jpeg':\n      const dimensions = getJpegDimensions(data);\n      width = dimensions.width;\n      height = dimensions.height;\n      break;\n    case 'png':\n      width = data.readUInt32BE(16);\n      height = data.readUInt32BE(20);\n      break;\n    case 'gif':\n      width = data.readUInt16LE(6);\n      height = data.readUInt16LE(8);\n      break;\n    case 'webp':\n      const vp8Header = data.slice(12, 16).toString('hex');\n      if (vp8Header === '9d012a') {\n        width = data.readUIntLE(26, 2);\n        height = data.readUIntLE(28, 2);\n      } else if (vp8Header === '2a012a') {\n        const alphaOffset = data.indexOf('414c4641', 20, 'hex');\n        if (alphaOffset !== -1) {\n          width = data.readUIntLE(26, 2);\n          height = data.readUIntLE(alphaOffset + 16, 2);\n        }\n      }\n      break;\n    default:\n      throw new Error('Unsupported image type');\n  }\n\n  return { width, height, type };\n}\n\nfunction getImageType(header) {\n  if (header.startsWith('ffd8')) {\n    return 'jpeg';\n  } else if (header.startsWith('89504e470d0a1a0a')) {\n    return 'png';\n  } else if (header.startsWith('47494638')) {\n    return 'gif';\n  } else if (header.startsWith('52494646') &amp;&amp; header.endsWith('57454250')) {\n    return 'webp';\n  } else {\n    throw new Error('Unsupported image type');\n  }\n}\n\n// Copyright (c) 2015 Vitaly Puzrin.\n\n// Permission is hereby granted, free of charge, to any person\n// obtaining a copy of this software and associated documentation\n// files (the \"Software\"), to deal in the Software without\n// restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the\n// Software is furnished to do so, subject to the following\n// conditions:\n\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n// OTHER DEALINGS IN THE SOFTWARE.\n// \n// Following is extract from probe-image-size library\nfunction getJpegDimensions(data) {\n  if (data.length &lt; 2) return;\n\n  // first marker of the file MUST be 0xFFD8,\n  // following by either 0xFFE0, 0xFFE2 or 0xFFE3\n  if (data[0] !== 0xFF || data[1] !== 0xD8 || data[2] !== 0xFF) return;\n\n  var offset = 2;\n\n  for (;;) {\n    // skip until we see 0xFF, see https://github.com/nodeca/probe-image-size/issues/68\n    for (;;) {\n      if (data.length - offset &lt; 2) return;\n      if (data[offset++] === 0xFF) break;\n    }\n\n    var code = data[offset++];\n    var length;\n\n    // skip padding bytes\n    while (code === 0xFF) code = data[offset++];\n\n    // standalone markers, according to JPEG 1992,\n    // http://www.w3.org/Graphics/JPEG/itu-t81.pdf, see Table B.1\n    if ((0xD0 &lt;= code &amp;&amp; code &lt;= 0xD9) || code === 0x01) {\n      length = 0;\n    } else if (0xC0 &lt;= code &amp;&amp; code &lt;= 0xFE) {\n      // the rest of the unreserved markers\n      if (data.length - offset &lt; 2) return;\n\n      length = readUInt16BE(data, offset) - 2;\n      offset += 2;\n    } else {\n      // unknown markers\n      return;\n    }\n\n    if (code === 0xD9 /* EOI */ || code === 0xDA /* SOS */) {\n      // end of the datastream\n      return;\n    }\n\n    if (length &gt;= 5 &amp;&amp;\n        (0xC0 &lt;= code &amp;&amp; code &lt;= 0xCF) &amp;&amp;\n        code !== 0xC4 &amp;&amp; code !== 0xC8 &amp;&amp; code !== 0xCC) {\n\n      if (data.length - offset &lt; length) return;\n\n      var result = {\n        width:  readUInt16BE(data, offset + 3),\n        height: readUInt16BE(data, offset + 1),\n      };\n\n      return result;\n    }\n\n    offset += length;\n  }\n}\n\nfunction readUInt16BE(data, offset) {\n  return data[offset + 1] | (data[offset] &lt;&lt; 8);\n};</pre><div><br></div>",
      "title": "Get Image dimensions without dependencies – node or deno",
      "uuid": "eb814ba1-12f8-4b1d-a5e0-6513141abbf5",
      "date": "28 November 2023"
    },
    {
      "sortIndex": 5,
      "path": "/notes/use-animation",
      "title": "a hook wrapping a simple requestAnimationFrame based animation function (with an option to dynamically update the duration)",
      "content": "<pre>import { useEffect, useRef } from 'react';\n\n<strong>type</strong> draw = (fraction: number) <strong>=&gt;</strong> void;\n<strong>type</strong> duration = number;\n\n<strong>const</strong> useAnimation = (duration: duration, draw: draw) <strong>=&gt;</strong> {\n  <strong>const</strong> updateDurationRef = useRef&lt;null | ((newDuration: number) <strong>=&gt;</strong> void)&gt;(null);\n  <strong>const</strong> currentAnimationIdRef = useRef(0);\n  <strong>const</strong> elapsedTimeRef = useRef(0);\n\n  useEffect(() <strong>=&gt;</strong> {\n    <strong>const</strong> animate = (duration: duration, draw: draw) <strong>=&gt;</strong> {\n      <strong>let</strong> start: number | null = null;\n\n      <strong>const</strong> animation = (timestamp: number) <strong>=&gt;</strong> {\n        if (!start) start = timestamp;\n        elapsedTimeRef.current = timestamp - start;\n        <strong>const</strong> percentage = Math.min(elapsedTimeRef.current / duration, 1);\n\n        draw(percentage);\n\n        if (elapsedTimeRef.current &lt; duration) {\n          currentAnimationIdRef.current = requestAnimationFrame(animation);\n        } else {\n          start = null;\n          currentAnimationIdRef.current = requestAnimationFrame(animation);\n        }\n      };\n\n      <strong>const</strong> updateDuration = (newDuration: number) <strong>=&gt;</strong> {\n        <strong>const</strong> currentProgress = elapsedTimeRef.current / duration;\n        start = performance.now() - newDuration * currentProgress;\n        duration = newDuration;\n        cancelAnimationFrame(currentAnimationIdRef.current);\n        currentAnimationIdRef.current = requestAnimationFrame(animation);\n      };\n\n      currentAnimationIdRef.current = requestAnimationFrame(animation);\n\n      return updateDuration;\n    };\n\n    updateDurationRef.current = animate(duration, draw);\n\n    return () <strong>=&gt;</strong> {\n      cancelAnimationFrame(currentAnimationIdRef.current);\n    };\n  }, [duration, draw]);\n\n  return updateDurationRef.current;\n};\n\nexport { useAnimation };\n<br></pre>",
      "uuid": "db7db469-b055-4d59-9a9d-0d95ea5ebf8e",
      "date": "4 March 2024"
    },
    {
      "sortIndex": 6,
      "path": "/notes/weekly-notes-march-26",
      "title": "Week 13",
      "content": "<div>I have recently started listening to audio books while walking the dog. My wife gave me that advice, as she apparently did it for a while now (we got Bandito a bit over 2 years ago, 10 days before Russia started its terrorirst assault on Ukraine). <br><br>The first book I listened to was Anna Karenina by Leo Tolstoy. What an amazing book it is. I am now convinced this is the best book ever written. I tried reading it several times in my life every time getting to about 25-35% of the book and then not getting back to it. Not sure why that was. Somehow, while discussing dramatic events the book is not gloomy and not depressive, it’s filled with hope and curiosity and love for life. The book discusses almost any subject imaginable, from marriage and family to how to be a business owner or how to do work, and what work is worth it. I enjoyed it very much. I keep thinking about it daily. It’s inspiring and fun, and educating etc. etc.<br><br>I had then listened to Roadside Picnic by Strugatsky Brothers. 8/10<br><br>I then listened to Fathers and Sons by Turgenev. 10/10<br><br>After that I picked Gogol’s \"Evenings on a Farm Near Dikanka\" - something I remembered as being more humorous than scary from being a kid. Well, I remembered wrong, it’s quite scary and bloody and terrifying. 9/10 <br><br>I have then listened to an abridged version of \"<a href=\"https://en.wikipedia.org/wiki/Three_Men_in_a_Boat\">Three Men in a Boat</a>\" read by Hugh Laurie. Fun but too bad it’s not the full thing.&nbsp;<br><br>I’m almost done listening to Frankenstein read by Christopher Lee – great listen as well. What a sad story.&nbsp;</div>",
      "uuid": "92f7397e-02f1-49c8-a546-6d4e7ddaaa89",
      "date": "26 March 2024"
    },
    {
      "sortIndex": 7,
      "path": "/notes/prose-mirror-web-component-step-1",
      "title": "Prose Mirror Web Component Step 1",
      "content": "<div>I want to create a minimalistic prose-mirror wrapper using a web component. Something that could be used like:</div><pre>&lt;!-- html --&gt;\n&lt;prose-mirror html=\"&lt;h1&gt;Hello&lt;/h1&gt;&lt;p&gt;Text&lt;/p&gt;\" onChangeEvent=\"change\"&gt;&lt;/prose-mirror&gt;\n\n// js \ndocument.querySelector('prose-mirror').addEventListener('change', (event) =&gt; {\n  console.log(event.data.html);\n  console.log(event.data.doc);\n});</pre><div>This is a series of steps that I will need to take to get there.<br><br>We start by reading the manual of Prose Mirror – <a href=\"https://prosemirror.net/docs/guide/\">which is great</a>.</div><div><br></div><div>To follow the first example we need to make the following line of code work:</div><pre>import {schema} from \"prosemirror-schema-basic\"</pre><div>We need to either use npm and a build tool that will process this code and produce a bundle (tools like esbuild, webpack etc.) or we could rely on the ability to load modules via URLs natively in the browser. First thing I usually try is to load the module from one of the ESM CDNs, like esm.sh, jsdeliver.com etc. So, I tried doing this:</div><pre>import {schema} from \"https://esm.sh/prosemirror-schema-basic\"\nimport {EditorState} from \"https://esm.sh/prosemirror-state\"\nimport {EditorView} from \"https://esm.sh/prosemirror-view\"</pre><div>This works, and we can see in the network tab how the modules are loaded from the CDN. If we do that, we might notice an issue though – \"prosemirror-model\" is loaded twice. That is already suboptimal, but if we look at the modules closer, we can notice that the versions don’t match. One was `@1.19.3` and another `@1.19.4` – this is no good, I can smell trouble. </div><div>OK, I put a //FIXME comment on top of the imports block describing the issue and go on with the tutorial – soon enough I see the following when pressing \"enter\" inside the editor:&nbsp;</div><pre>&gt; RangeError: Can not convert &lt;&gt; to a Fragment (looks like multiple versions of prosemirror-model were loaded)</pre><div>Aha. The way esm.sh works is that it rewrites the URLs inside the NPM modules to point at esm.sh paths (since native module loaders need to know where to load the modules from)&nbsp; – however it needs to know at which versions to point and normally uses each top-dependencies’ package.json to determine that. This results in some modules being loaded twice, as long as at least two packages have a sub-dependency of the same module but at different versions. We don’t want <em>that</em>.&nbsp;</div><div><br></div><div>There is a nice solution – the standard platform is getting better all the time, and import-maps, a feature that allows us to use absolute module paths like in node, is almost <a href=\"https://caniuse.com/import-maps\">universally supported now</a>.&nbsp;</div><div><br></div><div>So, we create the following import map and place it in index.html before loading our main script:&nbsp;</div><div>```</div><div>&lt;script type=\"importmap\"&gt;</div><div>&nbsp; {</div><div>&nbsp; &nbsp; \"imports\": {</div><div>&nbsp; &nbsp; &nbsp; \"prosemirror-model\": \"https://esm.sh/*prosemirror-model@1.19.4\",</div><div>&nbsp; &nbsp; &nbsp; \"orderedmap\": \"https://esm.sh/*orderedmap@2.1.1\",</div><div>&nbsp; &nbsp; &nbsp; \"prosemirror-schema-basic\": \"https://esm.sh/*prosemirror-schema-basic@1.2.2\",</div><div>&nbsp; &nbsp; &nbsp; \"prosemirror-state\": \"https://esm.sh/*prosemirror-state@1.4.3\",</div><div>&nbsp; &nbsp; &nbsp; \"prosemirror-transform\": \"https://esm.sh/*prosemirror-transform@1.8.0\",</div><div>&nbsp; &nbsp; &nbsp; \"prosemirror-view\": \"https://esm.sh/*prosemirror-view@1.33.3\",</div><div>&nbsp; &nbsp; &nbsp; \"rope-sequence\": \"https://esm.sh/*rope-sequence@1.3.4\",</div><div>&nbsp; &nbsp; &nbsp; \"prosemirror-history\": \"https://esm.sh/*prosemirror-history@1.4.0\",</div><div>&nbsp; &nbsp; &nbsp; \"prosemirror-keymap\": \"https://esm.sh/*prosemirror-keymap@1.2.2\",</div><div>&nbsp; &nbsp; &nbsp; \"w3c-keyname\": \"https://esm.sh/*w3c-keyname@2.2.8\",</div><div>&nbsp; &nbsp; &nbsp; \"prosemirror-commands\": \"https://esm.sh/*prosemirror-commands@1.5.2\"</div><div>&nbsp; &nbsp; }</div><div>&nbsp; }</div><div>&lt;/script&gt;</div><div>&lt;script type=\"module\" src=\"./index.js\"&gt;&lt;/script&gt;</div><div>```</div><div><br></div><div>In the module URLs, like \"https://esm.sh/*prosemirror-commands@1.5.2\", the package names are prefixed with a star character – that means no paths rewriting is happening when esm.sh is printing our modules for us to load – since we rely on import maps and can control exact version loaded this way. Luckily for me, prosemirror is a software of the highest class and as you can see it has very few dependencies and the dependencies it has, have no dependencies themselves. This is so pleasant to work with after modern JS libs that normally pull 900MB of node_modules with many hundreds of dependencies.&nbsp;</div><div><br></div><div>Now we have the import map set up (btw, there is a polyfill for 8% of the browsers that still don’t support it – <a href=\"https://www.npmjs.com/package/es-module-shims\">https://www.npmjs.com/package/es-module-shims</a>, I had to use it as I’m on Safari 16.3, just one minor verson before the support was introduced) and we can move on with the tutorial. We’ll go on in the Step 2 of this series.</div><div><br></div>",
      "date": "2024-03-29",
      "uuid": "4bdbc773-357c-4962-b406-bf918d4ae96f"
    }
  ],
  "news": []
}